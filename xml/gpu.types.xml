<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/media/rou/Seagate Expansion Drive/Programming_Projects/Linux2018/Tests/blender/doc/python_api/sphinx-in/gpu.types.rst">
    <section ids="module-gpu.types gpu-types-gpu-types" names="gpu\ types\ (gpu.types)">
        <title>GPU Types (gpu.types)</title>
        <index entries="['single',\ 'gpu.types\ (module)',\ 'module-gpu.types',\ '',\ None]"></index>
        <index entries="['single',\ 'GPUBatch\ (class\ in\ gpu.types)',\ 'gpu.types.GPUBatch',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUBatch" ids="gpu.types.GPUBatch" module="gpu.types" names="gpu.types.GPUBatch"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUBatch</desc_name></desc_signature>
            <desc_content>
                <paragraph>GPUBatch(type, buf)</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>Contains VAOs + VBOs + Shader representing a drawable entity.</term>
                        <definition>
                            <field_list>
                                <field>
                                    <field_name>param type</field_name>
                                    <field_body>
                                        <paragraph>One of these primitive types: {
                                            “POINTS”,
                                            “LINES”,
                                            “TRIS”,
                                            “LINE_STRIP”,
                                            “LINE_LOOP”,
                                            “TRI_STRIP”,
                                            “TRI_FAN”,
                                            “LINES_ADJ”,
                                            “TRIS_ADJ”,
                                            “LINE_STRIP_ADJ”,
                                            “NONE”}</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>type type</field_name>
                                    <field_body>
                                        <paragraph><title_reference>str</title_reference></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>param buf</field_name>
                                    <field_body>
                                        <paragraph>Vertex buffer.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>type buf</field_name>
                                    <field_body>
                                        <field_list>
                                            <field>
                                                <field_name>class</field_name>
                                                <field_body>
                                                    <paragraph><title_reference>gpu.types.GPUVertBuf</title_reference></paragraph>
                                                </field_body>
                                            </field>
                                        </field_list>
                                    </field_body>
                                </field>
                            </field_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>TODO</paragraph>
                <paragraph>TODO</paragraph>
                <paragraph>TODO</paragraph>
                <paragraph>Undocumented <title_reference>contribute &lt;https://developer.blender.org/T51061&gt;</title_reference></paragraph>
                <paragraph>Undocumented <title_reference>contribute &lt;https://developer.blender.org/T51061&gt;</title_reference></paragraph>
                <paragraph>Undocumented <title_reference>contribute &lt;https://developer.blender.org/T51061&gt;</title_reference></paragraph>
                <paragraph>Undocumented <title_reference>contribute &lt;https://developer.blender.org/T51061&gt;</title_reference></paragraph>
                <paragraph>Undocumented <title_reference>contribute &lt;https://developer.blender.org/T51061&gt;</title_reference></paragraph>
                <paragraph>TODO</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'GPUOffScreen\ (class\ in\ gpu.types)',\ 'gpu.types.GPUOffScreen',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUOffScreen" ids="gpu.types.GPUOffScreen" module="gpu.types" names="gpu.types.GPUOffScreen"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUOffScreen</desc_name></desc_signature>
            <desc_content>
                <paragraph>GPUOffScreen(width, height, samples=0)</paragraph>
                <block_quote>
                    <paragraph>This object gives access to off screen buffers.</paragraph>
                    <field_list>
                        <field>
                            <field_name>param width</field_name>
                            <field_body>
                                <paragraph>Horizontal dimension of the buffer.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type width</field_name>
                            <field_body>
                                <paragraph><title_reference>int</title_reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param height</field_name>
                            <field_body>
                                <paragraph>Vertical dimension of the buffer.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type height</field_name>
                            <field_body>
                                <paragraph><title_reference>int</title_reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param samples</field_name>
                            <field_body>
                                <paragraph>OpenGL samples to use for MSAA or zero to disable.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type samples</field_name>
                            <field_body>
                                <paragraph><title_reference>int</title_reference></paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </block_quote>
                <literal_block highlight_args="{'linenostart': 1}" linenos="False" source="/media/rou/Seagate Expansion Drive/Programming_Projects/Linux2018/Tests/blender/doc/python_api/examples/gpu.types.GPUOffScreen.py" xml:space="preserve"># Draws an off-screen buffer and display it in the corner of the view.
import bpy
from bgl import *


class OffScreenDraw(bpy.types.Operator):
    bl_idname = "view3d.offscreen_draw"
    bl_label = "View3D Offscreen Draw"

    _handle_calc = None
    _handle_draw = None
    is_enabled = False

    # manage draw handler
    @staticmethod
    def draw_callback_px(self, context):
        scene = context.scene
        aspect_ratio = scene.render.resolution_x / scene.render.resolution_y

        self._update_offscreen(context, self._offscreen)
        self._opengl_draw(context, self._texture, aspect_ratio, 0.2)

    @staticmethod
    def handle_add(self, context):
        OffScreenDraw._handle_draw = bpy.types.SpaceView3D.draw_handler_add(
            self.draw_callback_px, (self, context),
            'WINDOW', 'POST_PIXEL',
        )

    @staticmethod
    def handle_remove():
        if OffScreenDraw._handle_draw is not None:
            bpy.types.SpaceView3D.draw_handler_remove(OffScreenDraw._handle_draw, 'WINDOW')

        OffScreenDraw._handle_draw = None

    # off-screen buffer
    @staticmethod
    def _setup_offscreen(context):
        import gpu
        scene = context.scene
        aspect_ratio = scene.render.resolution_x / scene.render.resolution_y

        try:
            offscreen = gpu.types.GPUOffScreen(512, int(512 / aspect_ratio))
        except Exception as e:
            print(e)
            offscreen = None

        return offscreen

    @staticmethod
    def _update_offscreen(context, offscreen):
        scene = context.scene
        view_layer = context.view_layer
        render = scene.render
        camera = scene.camera

        modelview_matrix = camera.matrix_world.inverted()
        projection_matrix = camera.calc_matrix_camera(
            render.resolution_x,
            render.resolution_y,
            render.pixel_aspect_x,
            render.pixel_aspect_y,
        )

        offscreen.draw_view3d(
            scene,
            render_layer,
            context.space_data,
            context.region,
            projection_matrix,
            modelview_matrix,
        )

    @staticmethod
    def _opengl_draw(context, texture, aspect_ratio, scale):
        """
        OpenGL code to draw a rectangle in the viewport
        """

        glDisable(GL_DEPTH_TEST)

        # view setup
        glMatrixMode(GL_PROJECTION)
        glPushMatrix()
        glLoadIdentity()

        glMatrixMode(GL_MODELVIEW)
        glPushMatrix()
        glLoadIdentity()

        glOrtho(-1, 1, -1, 1, -15, 15)
        gluLookAt(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)

        act_tex = Buffer(GL_INT, 1)
        glGetIntegerv(GL_TEXTURE_2D, act_tex)

        viewport = Buffer(GL_INT, 4)
        glGetIntegerv(GL_VIEWPORT, viewport)

        width = int(scale * viewport[2])
        height = int(width / aspect_ratio)

        glViewport(viewport[0], viewport[1], width, height)
        glScissor(viewport[0], viewport[1], width, height)

        # draw routine
        glEnable(GL_TEXTURE_2D)
        glActiveTexture(GL_TEXTURE0)

        glBindTexture(GL_TEXTURE_2D, texture)

        texco = [(1, 1), (0, 1), (0, 0), (1, 0)]
        verco = [(1.0, 1.0), (-1.0, 1.0), (-1.0, -1.0), (1.0, -1.0)]

        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)

        glColor4f(1.0, 1.0, 1.0, 1.0)

        glBegin(GL_QUADS)
        for i in range(4):
            glTexCoord3f(texco[i][0], texco[i][1], 0.0)
            glVertex2f(verco[i][0], verco[i][1])
        glEnd()

        # restoring settings
        glBindTexture(GL_TEXTURE_2D, act_tex[0])

        glDisable(GL_TEXTURE_2D)

        # reset view
        glMatrixMode(GL_PROJECTION)
        glPopMatrix()

        glMatrixMode(GL_MODELVIEW)
        glPopMatrix()

        glViewport(viewport[0], viewport[1], viewport[2], viewport[3])
        glScissor(viewport[0], viewport[1], viewport[2], viewport[3])

    # operator functions
    @classmethod
    def poll(cls, context):
        return context.area.type == 'VIEW_3D'

    def modal(self, context, event):
        if context.area:
            context.area.tag_redraw()

        return {'PASS_THROUGH'}

    def invoke(self, context, event):
        if OffScreenDraw.is_enabled:
            self.cancel(context)

            return {'FINISHED'}

        else:
            self._offscreen = OffScreenDraw._setup_offscreen(context)
            if self._offscreen:
                self._texture = self._offscreen.color_texture
            else:
                self.report({'ERROR'}, "Error initializing offscreen buffer. More details in the console")
                return {'CANCELLED'}

            OffScreenDraw.handle_add(self, context)
            OffScreenDraw.is_enabled = True

            if context.area:
                context.area.tag_redraw()

            context.window_manager.modal_handler_add(self)
            return {'RUNNING_MODAL'}

    def cancel(self, context):
        OffScreenDraw.handle_remove()
        OffScreenDraw.is_enabled = False

        if context.area:
            context.area.tag_redraw()


def register():
    bpy.utils.register_class(OffScreenDraw)


def unregister():
    bpy.utils.unregister_class(OffScreenDraw)


if __name__ == "__main__":
    register()
</literal_block>
                <paragraph>bind(save=True)</paragraph>
                <block_quote>
                    <paragraph>Bind the offscreen object.</paragraph>
                    <field_list>
                        <field>
                            <field_name>param save</field_name>
                            <field_body>
                                <paragraph>save OpenGL current states.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type save</field_name>
                            <field_body>
                                <paragraph>bool</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </block_quote>
                <paragraph>draw_view3d(scene, view3d, region, modelview_matrix, projection_matrix)</paragraph>
                <block_quote>
                    <paragraph>Draw the 3d viewport in the offscreen object.</paragraph>
                    <field_list>
                        <field>
                            <field_name>param scene</field_name>
                            <field_body>
                                <paragraph>Scene to draw.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type scene</field_name>
                            <field_body>
                                <paragraph><reference internal="True" reftitle="bpy.types.Scene" refuri="bpy.types.Scene#bpy.types.Scene"><literal classes="xref py py-class">bpy.types.Scene</literal></reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param view3d</field_name>
                            <field_body>
                                <paragraph>3D View to get the drawing settings from.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type view3d</field_name>
                            <field_body>
                                <paragraph><reference internal="True" reftitle="bpy.types.SpaceView3D" refuri="bpy.types.SpaceView3D#bpy.types.SpaceView3D"><literal classes="xref py py-class">bpy.types.SpaceView3D</literal></reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param region</field_name>
                            <field_body>
                                <paragraph>Region of the 3D View.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type region</field_name>
                            <field_body>
                                <paragraph><reference internal="True" reftitle="bpy.types.Region" refuri="bpy.types.Region#bpy.types.Region"><literal classes="xref py py-class">bpy.types.Region</literal></reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param modelview_matrix</field_name>
                            <field_body>
                                <paragraph>ModelView Matrix.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type modelview_matrix</field_name>
                            <field_body>
                                <paragraph><reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param projection_matrix</field_name>
                            <field_body>
                                <paragraph>Projection Matrix.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type projection_matrix</field_name>
                            <field_body>
                                <paragraph><reference internal="True" reftitle="mathutils.Matrix" refuri="mathutils#mathutils.Matrix"><literal classes="xref py py-class">mathutils.Matrix</literal></reference></paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </block_quote>
                <paragraph>free()</paragraph>
                <block_quote>
                    <paragraph>Free the offscreen object
                        The framebuffer, texture and render objects will no longer be accessible.</paragraph>
                </block_quote>
                <paragraph>unbind(restore=True)</paragraph>
                <block_quote>
                    <paragraph>Unbind the offscreen object.</paragraph>
                    <field_list>
                        <field>
                            <field_name>param restore</field_name>
                            <field_body>
                                <paragraph>restore OpenGL previous states.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type restore</field_name>
                            <field_body>
                                <paragraph>bool</paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </block_quote>
                <index entries="['single',\ 'color_texture\ (gpu.types.GPUOffScreen\ attribute)',\ 'gpu.types.GPUOffScreen.color_texture',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.color_texture" ids="gpu.types.GPUOffScreen.color_texture" module="gpu.types" names="gpu.types.GPUOffScreen.color_texture"><desc_name xml:space="preserve">color_texture</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Color texture.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'height\ (gpu.types.GPUOffScreen\ attribute)',\ 'gpu.types.GPUOffScreen.height',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.height" ids="gpu.types.GPUOffScreen.height" module="gpu.types" names="gpu.types.GPUOffScreen.height"><desc_name xml:space="preserve">height</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Texture height.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'width\ (gpu.types.GPUOffScreen\ attribute)',\ 'gpu.types.GPUOffScreen.width',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUOffScreen" first="False" fullname="GPUOffScreen.width" ids="gpu.types.GPUOffScreen.width" module="gpu.types" names="gpu.types.GPUOffScreen.width"><desc_name xml:space="preserve">width</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>Texture width.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'GPUShader\ (class\ in\ gpu.types)',\ 'gpu.types.GPUShader',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUShader" ids="gpu.types.GPUShader" module="gpu.types" names="gpu.types.GPUShader"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUShader</desc_name></desc_signature>
            <desc_content>
                <paragraph>GPUShader(vertexcode, fragcode, geocode=None, libcode=None, defines=None)</paragraph>
                <paragraph>GPUShader combines multiple GLSL shaders into a program used for drawing.
                    It must contain a vertex and fragment shaders, with an optional geometry shader.</paragraph>
                <paragraph>The GLSL #version directive is automatically included at the top of shaders, and set to 330.</paragraph>
                <paragraph>Some preprocessor directives are automatically added according to the Operating System or availability.
                    These are:</paragraph>
                <block_quote>
                    <paragraph>“#define GPU_ATIn”
                        “#define GPU_NVIDIAn”
                        “#define GPU_INTELn”</paragraph>
                </block_quote>
                <definition_list>
                    <definition_list_item>
                        <term>The following extensions are enabled by default if supported by the GPU:</term>
                        <definition>
                            <paragraph>“#extension GL_ARB_texture_gather: enablen”
                                “#extension GL_ARB_texture_query_lod: enablen”</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>To debug shaders, use the –debug-gpu-shaders command line option to see full GLSL shader compilation and linking errors.</paragraph>
                <block_quote>
                    <field_list>
                        <field>
                            <field_name>param vertexcode</field_name>
                            <field_body>
                                <paragraph>vertex Shader Code.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type vertexcode</field_name>
                            <field_body>
                                <paragraph><title_reference>str</title_reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param fragcode</field_name>
                            <field_body>
                                <paragraph>fragment Shader Code.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type value</field_name>
                            <field_body>
                                <paragraph><title_reference>str</title_reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param geocode</field_name>
                            <field_body>
                                <paragraph>geometry Shader Code.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type value</field_name>
                            <field_body>
                                <paragraph><title_reference>str</title_reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param libcode</field_name>
                            <field_body>
                                <paragraph>code with functions and presets to be shared between shaders.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type value</field_name>
                            <field_body>
                                <paragraph><title_reference>str</title_reference></paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>param defines</field_name>
                            <field_body>
                                <paragraph>preprocessor directives.</paragraph>
                            </field_body>
                        </field>
                        <field>
                            <field_name>type value</field_name>
                            <field_body>
                                <paragraph><title_reference>str</title_reference></paragraph>
                            </field_body>
                        </field>
                    </field_list>
                </block_quote>
                <index entries="['single',\ 'attr_from_name()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.attr_from_name',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.attr_from_name" ids="gpu.types.GPUShader.attr_from_name" module="gpu.types" names="gpu.types.GPUShader.attr_from_name"><desc_name xml:space="preserve">attr_from_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get attribute location by name.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<title_reference>str</title_reference>) – the name of the attribute variable whose location is to be queried.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the location of an attribute variable.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'bind()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.bind',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.bind" ids="gpu.types.GPUShader.bind" module="gpu.types" names="gpu.types.GPUShader.bind"><desc_name xml:space="preserve">bind</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Bind the Shader object.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'transform_feedback_disable()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.transform_feedback_disable',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.transform_feedback_disable" ids="gpu.types.GPUShader.transform_feedback_disable" module="gpu.types" names="gpu.types.GPUShader.transform_feedback_disable"><desc_name xml:space="preserve">transform_feedback_disable</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disable transform feedback.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'transform_feedback_enable()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.transform_feedback_enable',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.transform_feedback_enable" ids="gpu.types.GPUShader.transform_feedback_enable" module="gpu.types" names="gpu.types.GPUShader.transform_feedback_enable"><desc_name xml:space="preserve">transform_feedback_enable</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">vbo_id</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Start transform feedback operation.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>true if transform feedback was succesfully enabled.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><title_reference>bool</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'uniform_block_from_name()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.uniform_block_from_name',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_block_from_name" ids="gpu.types.GPUShader.uniform_block_from_name" module="gpu.types" names="gpu.types.GPUShader.uniform_block_from_name"><desc_name xml:space="preserve">uniform_block_from_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get uniform block location by name.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<title_reference>str</title_reference>) – name of the uniform block variable whose location is to be queried.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the location of the uniform block variable.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'uniform_from_name()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.uniform_from_name',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_from_name" ids="gpu.types.GPUShader.uniform_from_name" module="gpu.types" names="gpu.types.GPUShader.uniform_from_name"><desc_name xml:space="preserve">uniform_from_name</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">name</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get uniform location by name.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong refspecific="True">name</literal_strong> (<title_reference>str</title_reference>) – name of the uniform variable whose location is to be queried.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the location of the uniform variable.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><title_reference>int</title_reference></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'uniform_int()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.uniform_int',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_int" ids="gpu.types.GPUShader.uniform_int" module="gpu.types" names="gpu.types.GPUShader.uniform_int"><desc_name xml:space="preserve">uniform_int</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">location</desc_parameter><desc_parameter xml:space="preserve">value</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set uniform value.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">location</literal_strong> (<title_reference>int</title_reference>) – builtin identifier.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">value</literal_strong> (<title_reference>int</title_reference>) – builtin identifier.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'uniform_vector_float()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.uniform_vector_float',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_vector_float" ids="gpu.types.GPUShader.uniform_vector_float" module="gpu.types" names="gpu.types.GPUShader.uniform_vector_float"><desc_name xml:space="preserve">uniform_vector_float</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">location</desc_parameter><desc_parameter xml:space="preserve">buffer</desc_parameter><desc_parameter xml:space="preserve">length</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set the buffer to fill the uniform.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">location</literal_strong> (<title_reference>int</title_reference>) – location of the uniform variable to be modified.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">buffer</literal_strong> (<title_reference>buffer object</title_reference>) – buffer object with format float.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">length</literal_strong> (<title_reference>int</title_reference>) – size of the uniform data type:
                                                1: float
                                                2: vec2 or float[2]
                                                3: vec3 or float[3]
                                                4: vec4 or float[4]
                                                9: mat3
                                                16: mat4</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong refspecific="True">count</literal_strong> (<title_reference>int</title_reference>) – specifies the number of elements, vector or matrices that are to be modified.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'uniform_vector_int()\ (gpu.types.GPUShader\ method)',\ 'gpu.types.GPUShader.uniform_vector_int',\ '',\ None]"></index>
                <desc desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.uniform_vector_int" ids="gpu.types.GPUShader.uniform_vector_int" module="gpu.types" names="gpu.types.GPUShader.uniform_vector_int"><desc_name xml:space="preserve">uniform_vector_int</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve">location</desc_parameter><desc_parameter xml:space="preserve">buffer</desc_parameter><desc_parameter xml:space="preserve">length</desc_parameter><desc_parameter xml:space="preserve">count</desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>See GPUShader.uniform_vector_float(…) description.</paragraph>
                    </desc_content>
                </desc>
                <paragraph>.</paragraph>
                <index entries="['single',\ 'program\ (gpu.types.GPUShader\ attribute)',\ 'gpu.types.GPUShader.program',\ '',\ None]"></index>
                <desc desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="GPUShader" first="False" fullname="GPUShader.program" ids="gpu.types.GPUShader.program" module="gpu.types" names="gpu.types.GPUShader.program"><desc_name xml:space="preserve">program</desc_name></desc_signature>
                    <desc_content>
                        <index entries=""></index>
                        <desc desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature first="False"><desc_name xml:space="preserve">The name of the program object for use by the OpenGL API (read-only).</desc_name></desc_signature>
                            <desc_content>
                                <field_list>
                                    <field>
                                        <field_name>Return type</field_name>
                                        <field_body>
                                            <paragraph><title_reference>int</title_reference></paragraph>
                                        </field_body>
                                    </field>
                                </field_list>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
        <index entries="['single',\ 'GPUVertBuf\ (class\ in\ gpu.types)',\ 'gpu.types.GPUVertBuf',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUVertBuf" ids="gpu.types.GPUVertBuf" module="gpu.types" names="gpu.types.GPUVertBuf"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUVertBuf</desc_name></desc_signature>
            <desc_content>
                <paragraph>GPUVertBuf(len, format)</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>Contains a VBO.</term>
                        <definition>
                            <field_list>
                                <field>
                                    <field_name>param len</field_name>
                                    <field_body>
                                        <paragraph>number of elements to allocate</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>type type</field_name>
                                    <field_body>
                                        <paragraph><title_reference>int</title_reference></paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>param format</field_name>
                                    <field_body>
                                        <paragraph>Vertex format.</paragraph>
                                    </field_body>
                                </field>
                                <field>
                                    <field_name>type buf</field_name>
                                    <field_body>
                                        <paragraph><title_reference>gpu.types.GPUVertFormat</title_reference></paragraph>
                                    </field_body>
                                </field>
                            </field_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>TODO</paragraph>
            </desc_content>
        </desc>
        <index entries="['single',\ 'GPUVertFormat\ (class\ in\ gpu.types)',\ 'gpu.types.GPUVertFormat',\ '',\ None]"></index>
        <desc desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" first="False" fullname="GPUVertFormat" ids="gpu.types.GPUVertFormat" module="gpu.types" names="gpu.types.GPUVertFormat"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">gpu.types.</desc_addname><desc_name xml:space="preserve">GPUVertFormat</desc_name></desc_signature>
            <desc_content>
                <paragraph>TODO</paragraph>
            </desc_content>
        </desc>
    </section>
</document>
