<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/media/rou/Seagate Expansion Drive/Programming_Projects/Linux2018/Tests/blender/doc/python_api/sphinx-in/bpy.data.rst">
    <section ids="module-bpy data-access-bpy-data" names="data\ access\ (bpy.data)">
        <title>Data Access (bpy.data)</title>
        <index entries="['single',\ 'bpy\ (module)',\ 'module-bpy',\ '',\ None]"></index>
        <paragraph>This module is used for all Blender/Python access.</paragraph>
        <index entries="['single',\ 'data\ (in\ module\ bpy)',\ 'bpy.data',\ '',\ None]"></index>
        <desc desctype="data" domain="py" noindex="False" objtype="data">
            <desc_signature class="" first="False" fullname="data" ids="bpy.data" module="bpy" names="bpy.data"><desc_addname xml:space="preserve">bpy.</desc_addname><desc_name xml:space="preserve">data</desc_name></desc_signature>
            <desc_content>
                <paragraph>Access to Blenderâ€™s internal data</paragraph>
                <field_list>
                    <field>
                        <field_name>Type</field_name>
                        <field_body>
                            <paragraph><reference internal="True" reftitle="bpy.types.BlendData" refuri="bpy.types.BlendData#bpy.types.BlendData"><literal classes="xref py py-class">bpy.types.BlendData</literal></reference></paragraph>
                        </field_body>
                    </field>
                </field_list>
            </desc_content>
        </desc>
        <literal_block highlight_args="{'linenostart': 1}" linenos="False" source="/media/rou/Seagate Expansion Drive/Programming_Projects/Linux2018/Tests/blender/doc/python_api/examples/bpy.data.py" xml:space="preserve">import bpy


# print all objects
for obj in bpy.data.objects:
    print(obj.name)


# print all scene names in a list
print(bpy.data.scenes.keys())


# remove mesh Cube
if "Cube" in bpy.data.meshes:
    mesh = bpy.data.meshes["Cube"]
    print("removing mesh", mesh)
    bpy.data.meshes.remove(mesh)


# write images into a file next to the blend
import os
file = open(os.path.splitext(bpy.data.filepath)[0] + ".txt", 'w')

for image in bpy.data.images:
    file.write("%s %d x %d\n" % (image.filepath, image.size[0], image.size[1]))

file.close()
</literal_block>
    </section>
</document>
